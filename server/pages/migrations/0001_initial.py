# Generated by Django 4.2.7 on 2023-11-20 09:34

from django.db import migrations, models
import django.db.models.deletion
import wagtail.blocks
import wagtail.fields
import wagtail_headless_preview.models
import wagtailutils.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0089_log_entry_data_json_null_to_object'),
        ('wagtailimages', '0025_alter_image_file_alter_rendition_file'),
    ]

    operations = [
        migrations.CreateModel(
            name='BasePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('repeat_in_subnav', models.BooleanField(default=False, help_text="If checked, a link to this page will be repeated alongside it's direct children when displaying a sub-navigation for this page.", verbose_name='repeat in sub-navigation')),
                ('repeated_item_text', models.CharField(blank=True, help_text="e.g. 'Section home' or 'Overview'. If left blank, the page title will be used.", max_length=255, verbose_name='repeated item link text')),
                ('additional_json_ld', models.JSONField(blank=True, null=True)),
                ('opengraph_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailimages.image', verbose_name='OpenGraph Image')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail_headless_preview.models.HeadlessMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='BasicPage',
            fields=[
                ('basepage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pages.basepage')),
                ('body', wagtail.fields.StreamField([('only_text', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('text', wagtailutils.blocks.RichTextBlock(required=True))])), ('image_and_text', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('text', wagtailutils.blocks.RichTextBlock(required=False)), ('image', wagtailutils.blocks.ImageChooserBlock(help_text='Optimal Dimension : 441x400', rendition_rules={'original': 'fill-441x400-c0|format-webp', 'original_fallback': 'fill-441x400-c0'}, required=False)), ('image_alignment', wagtail.blocks.ChoiceBlock(choices=[('left', 'Left'), ('right', 'Right')])), ('image_margin', wagtail.blocks.BooleanBlock(default=False, required=False)), ('top_padding', wagtail.blocks.BooleanBlock(default=True, required=False)), ('bottom_padding', wagtail.blocks.BooleanBlock(default=True, required=False))])), ('focus_Banner', wagtail.blocks.StructBlock([('mega_image', wagtailutils.blocks.ImageChooserBlock(help_text='Optimal Dimension : 986x493', rendition_rules={'original': 'fill-986x493-c0|format-webp', 'original_fallback': 'fill-986x493-c0'}, required=True)), ('baby_image', wagtailutils.blocks.ImageChooserBlock(help_text='Optimal Dimension : max width 250px', rendition_rules={'original': 'width-250|scale-100|format-webp', 'original_fallback': 'width-250|scale-100'}, required=False))]))], blank=True, null=True, use_json_field=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('pages.basepage',),
        ),
    ]
